;(function(root,factory){if(typeof module!=='undefined'&&module.exports){module.exports=factory()}else if(typeof define==='function'&&define.amd){define([],factory)}else root.Log=factory()})(this,function(){const that=this let _window=this.constructor.name==="Window"?window:''if(!_window){console.warn('暂不支持非浏览器环境！');return}let options={name:'Log',showLogs:true,unique:false,log:null,warn:'',error:'',}this.LogPag={}this.group_start=false this.group_end=false function Log(extendsOptions){Object.assign(options,extendsOptions)if(options.unique)logEndGroup();if(options.hideLogs)reLog()}function reLog(){console.log=function(any,mark){that.LogPag[Symbol(typeof mark==='string'?mark:new Date().toLocaleTimeString())]=any}}function logEndGroup(callback){const that=this console.log=function(any,mark=new Date().toLocaleTimeString()){if(that.group_start){if(options['log']&&typeof any==='string'&&typeof mark==='string'){let terOut=addStyleToType(any,mark,options['log'])console.info(terOut[0],terOut[1])}else{console.info(any,mark)}return}if(console.clear){console.clear();if(options['log']){let terOut=addStyleToType(any,mark,options['log'])console.info(terOut[0],terOut[1])}else{console.info(any,mark)}}else{console.warn('the current environment does not support.')}callback&&callback(any,mark)}console.group=function(){if(console.clear){console.clear();that.group_start=true}else{console.warn('the current environment does not support.')}}console.groupEnd=function(){that.group_start=false}}function addStyleToType(any,mark,options){if(mark&&mark.color){options=mark;mark=''}let _optionStr=''for(let pro in options){let _pro=pro let _match=pro.match(/[A-Z]/)?pro.match(/[A-Z]/)[0]:{}if(_match.length){pro=pro.replace(_match,`-${_match.toLowerCase()}`)}_optionStr+=`${pro}:${options[_pro]};`}return[`%c ${any}${mark||''}`,`${_optionStr}`]}return Log})